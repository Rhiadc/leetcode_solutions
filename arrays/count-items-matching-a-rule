You are given an array items, where each items[i] = [typei, colori, namei] describes the type, color, and name of the ith item. You are also given a rule represented by two strings, ruleKey and ruleValue.

The ith item is said to match the rule if one of the following is true:

    ruleKey == "type" and ruleValue == typei.
    ruleKey == "color" and ruleValue == colori.
    ruleKey == "name" and ruleValue == namei.

Return the number of items that match the given rule.

 

Example 1:

Input: items = [["phone","blue","pixel"],["computer","silver","lenovo"],["phone","gold","iphone"]], ruleKey = "color", ruleValue = "silver"
Output: 1
Explanation: There is only one item matching the given rule, which is ["computer","silver","lenovo"].

###############################################################################################################
Solution:
//More concise, less efficient
func countMatches(items [][]string, ruleKey string, ruleValue string) int {
    mapItems := make(map[int]interface{})
    aux := 0
    for v, k := range items {
        item := map[string]interface{}{"type": k[0], "color": k[1], "name": k[2]}
        mapItems[v] = item
    }

    for _, k := range mapItems {
        if k.(map[string]interface{})[ruleKey] == ruleValue{
            aux++
        }
    }

    return aux
}

//More efficient, less concise. itens into the items array must be ordered (order must be guaranteed)
func countMatches(items [][]string, ruleKey string, ruleValue string) int {
    aux := 0
    for _, k := range items {
        cond1 := ruleKey == "type" && k[0] == ruleValue
        cond2 := ruleKey == "color" && k[1] == ruleValue
        cond3 := ruleKey == "name" && k[2] == ruleValue
        if (cond1 || cond2 || cond3) {
            aux++
        }
        
    }
    return aux
}