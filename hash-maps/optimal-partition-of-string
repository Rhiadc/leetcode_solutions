Given a string s, partition the string into one or more substrings such that the characters in each substring are unique. That is, no letter appears in a single substring more than once.

Return the minimum number of substrings in such a partition.

Note that each character should belong to exactly one substring in a partition.

 

Example 1:

Input: s = "abacaba"
Output: 4
Explanation:
Two possible partitions are ("a","ba","cab","a") and ("ab","a","ca","ba").
It can be shown that 4 is the minimum number of substrings needed.

Example 2:

Input: s = "ssssss"
Output: 6
Explanation:
The only valid partition is ("s","s","s","s","s","s").
###############################################################################################################
Solution1:

func partitionString(s string) int {
	aux := make([]string, 0, len(s))
	mp := make(map[byte]int)
	value := ""
	for i := 0; i < len(s); i++ {
		if mp[s[i]]+1 == 2 {
			i--
			mp = make(map[byte]int)
			aux = append(aux, value)
			value = ""
			continue
		}
		mp[s[i]]++
		value += string(s[i])
	}
	return len(aux) + 1
}
