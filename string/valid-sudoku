Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

    Each row must contain the digits 1-9 without repetition.
    Each column must contain the digits 1-9 without repetition.
    Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.

Note:

    A Sudoku board (partially filled) could be valid but is not necessarily solvable.
    Only the filled cells need to be validated according to the mentioned rules.

 

Example 1:

Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true

Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.

###############################################################################################################
Solution1:
Using hashmap and creating a specific key for every position (column, row, grid (ixj))
func isValidSudoku(board [][]byte) bool {
    auxMap := make(map[string]struct{})
    for i:=0; i<9; i++ {
        //i is equal to row
        for j:=0; j<9; j++{
            //j is equal column
            if board[i][j] == '.' {
                continue
            }
            number := string(board[i][j])
            column := fmt.Sprintf("number: %s column: %d", number, j)
            row := fmt.Sprintf("number: %s row: %d", number, i)
            grid := fmt.Sprintf("number: %s grid: %d-%d", number, i/3, j/3)
            
            _, okColumn := auxMap[column]
            _, okRow := auxMap[row]
            _, okGrid := auxMap[grid]

            if okColumn || okRow || okGrid {
                return false
            }

            auxMap[column], auxMap[row], auxMap[grid] = struct{}{}, struct{}{}, struct{}{}
        }
    }
    return true
}
